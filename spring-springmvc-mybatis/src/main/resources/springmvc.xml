<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 配置Spring MVC包扫描器, Spring MVC只负责网站跳转逻辑这部分 -->
    <context:component-scan base-package="com.cj.ssm.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.RestControllerAdvice"/>
    </context:component-scan>

    <!-- 开启Spring Security注解支持, @PreAuthorize、@PostAuthorize、@PreFilter 和 @PostFilter -->
<!--    <security:global-method-security pre-post-annotations="enabled"/>-->

    <!--开启Spring MVC注解驱动, 支持基于注解的JSR303校验, 处理Ajax请求, 映射动态请求等
         validator: 将指定的校验器注册进WebDataBinder
         conversion-service: 将指定的ConversionService注册进HandlerAdapter
    -->
    <mvc:annotation-driven/>

    <!-- 将静态资源(或没有一个控制器可以映射的请求)交给Tomcat的默认Servlet处理 -->
    <mvc:default-servlet-handler/>

    <!-- 配置视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 路径前缀 -->
        <property name="prefix" value="/WEB-INF/views/"/>
        <!-- 路径后缀 -->
        <property name="suffix" value=".jsp"/>
        <!-- 设置默认视图 -->
        <!-- 默认视图只会应用于不包含 "redirect:" 和 "forward:" 前缀的视图名 -->
        <!--        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>-->
    </bean>


    <!-- 下面都是可选配置, 可根据个人需要进行配置 -->

    <!--
    path: 请求路径
    view-name: 视图名
    status-code: 状态码, 默认是200
    -->
    <!--    <mvc:view-controller path="/toLoginPage" view-name="login"/>-->

    <!--    &lt;!&ndash; 配置SimpleMappingExceptionResolver异常解析器 &ndash;&gt;-->
    <!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
    <!--        &lt;!&ndash; 设置解析器的优先级别, 越小越优先 (默认优先级最低) &ndash;&gt;-->
    <!--        <property name="order" value="-1024"/>-->
    <!--        &lt;!&ndash; 配置哪些异常对应哪些视图名 (错误页面) &ndash;&gt;-->
    <!--        <property name="exceptionMappings">-->
    <!--            <props>-->
    <!--                <prop key="java.lang.ArithmeticException">myerror</prop>-->
    <!--                <prop key="java.lang.NullPointerException">myerror</prop>-->
    <!--            </props>-->
    <!--        </property>-->
    <!--        &lt;!&ndash; 设置任意异常对应的默认视图名 &ndash;&gt;-->
    <!--        <property name="defaultErrorView" value="myerror"/>-->
    <!--        &lt;!&ndash; 设置要排除的异常 &ndash;&gt;-->
    <!--        &lt;!&ndash;<property name="excludedExceptions" value="java.lang.ClassNotFoundException"/>&ndash;&gt;-->
    <!--        &lt;!&ndash; 设置只解析哪些控制器抛出的异常, 默认是所有控制器 &ndash;&gt;-->
    <!--        &lt;!&ndash;<property name="mappedHandlerClasses" value="com.controller.MyExceptionHandler"/>&ndash;&gt;-->
    <!--        &lt;!&ndash; 设置要存进请求域的异常key, 以便在页面中可以取出异常, 默认是"exception" &ndash;&gt;-->
    <!--        &lt;!&ndash;<property name="exceptionAttribute" value="ex"/>&ndash;&gt;-->
    <!--    </bean>-->

    <!-- 配置拦截器 -->
    <!--    <mvc:interceptors>-->
    <!--        &lt;!&ndash; 配置一个全局拦截器，拦截所有请求 &ndash;&gt;-->
    <!--        <bean class="com.controller.MyFirstInterceptor"/>-->
    <!--        &lt;!&ndash; 配置一个拦截指定路径的拦截器 &ndash;&gt;-->
    <!--        <mvc:interceptor>-->
    <!--            &lt;!&ndash; 要拦截的路径, 支持ant风格 &ndash;&gt;-->
    <!--            <mvc:mapping path="/test01/**"/>-->
    <!--            &lt;!&ndash; 不拦截的路径 &ndash;&gt;-->
    <!--            <mvc:exclude-mapping path=""/>-->
    <!--            &lt;!&ndash; 要使用的拦截器 &ndash;&gt;-->
    <!--            <bean class="com.controller.MySecondInterceptor"/>-->
    <!--        </mvc:interceptor>-->
    <!--    </mvc:interceptors>-->

    <!--配置指定的ConversionService, 用于类型转换和数据格式化-->
    <!--    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">-->
    <!--        &lt;!&ndash;注册自定义的类型转换器&ndash;&gt;-->
    <!--        <property name="converters">-->
    <!--            <set>-->
    <!--                <bean class="com.controller.MyStringToEmployeeConverter"/>-->
    <!--            </set>-->
    <!--        </property>-->
    <!--    </bean>-->

    <!-- 配置校验器 -->
    <!--    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">-->
    <!--        &lt;!&ndash; 校验器，使用hibernate校验器 &ndash;&gt;-->
    <!--        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>-->
    <!--        &lt;!&ndash; 指定表示校验信息的资源文件，在文件中配置校验的错误信息，如果不指定则默认使用classpath下面的ValidationMessages.properties文件 &ndash;&gt;-->
    <!--        <property name="validationMessageSource" ref="messageSource"/>-->
    <!--    </bean>-->

    <!-- 配置国际化资源文件 -->
    <!--    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">-->
    <!--        &lt;!&ndash; 资源文件名 &ndash;&gt;-->
    <!--        <property name="basenames">-->
    <!--            <list>-->
    <!--                <value>classpath:errors</value>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--        &lt;!&ndash; 资源文件编码格式 &ndash;&gt;-->
    <!--        <property name="defaultEncoding" value="utf-8"/>-->
    <!--        &lt;!&ndash; 对资源文件的缓存时间, 单位秒 &ndash;&gt;-->
    <!--        <property name="cacheSeconds" value="120"/>-->
    <!--    </bean>-->

    <!--配置multipart解析器, 用于解析文件上传请求-->
    <!--    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
    <!--        &lt;!&ndash;设置一个请求能上传的总大小&ndash;&gt;-->
    <!--        <property name="maxUploadSize" value="#{1024*1024*10}"/>-->
    <!--        &lt;!&ndash;设置上传的每个文件的最大大小&ndash;&gt;-->
    <!--        <property name="maxUploadSizePerFile" value="#{1024*1024}"/>-->
    <!--        &lt;!&ndash;设置上传内容能保留在内存中的最大大小 (字节), 超过这个大小将会被写入临时目录, 默认为10240&ndash;&gt;-->
    <!--        <property name="maxInMemorySize" value="10240"/>-->
    <!--        &lt;!&ndash;设置存储上传文件的临时目录 ( 默认为servlet容器的临时目录)&ndash;&gt;-->
    <!--        &lt;!&ndash;        <property name="uploadTempDir" value=""/>&ndash;&gt;-->
    <!--        &lt;!&ndash;设置解析请求用的编码&ndash;&gt;-->
    <!--        <property name="defaultEncoding" value="UTF-8"/>-->
    <!--    </bean>-->

    <!--合并其他Spring MVC配置文件-->
    <!--    <import resource="springmvc2.xml"/>-->

</beans>

